global mut index: Int64 = 1

type Color = Greyscale(Int64) | RGB(Int64, Int64, Int64)

import imports.draw as draw(
  x: Int64, y: Int64, r: Int64, g: Int64, b: Int64
) -> Void

function min(floor: Int64, value: Int64) -> Int64 { 
  if value > floor then value else floor
}

function max(ceiling: Int64, value: Int64) -> Int64 { 
  if value < ceiling then value else ceiling
}

function clamp(
  floor: Int64, ceiling: Int64, value: Int64
) -> Int64 { min(floor, max(ceiling, value))}

function drawBounded(
  x: Int64, y: Int64, color: Color
) -> Color { 
  let maxWidth: Int64 = 600; 
  let maxHeight: Int64 = 600; 
  let (r,g,b) = case color {
    RGB(r, g, b) -> (r,g,b), 
    Greyscale(grey) -> (grey,grey,grey) 
  }; 
  draw(
    clamp(0, maxWidth, x), clamp(0, maxHeight, y), r, g, b
  ); 
  RGB(r, g, b)
}

function cycle(color: Color) -> Color { 
  case color {
    RGB(r, g, b) -> RGB(g, b, r), 
    Greyscale(grey) -> Greyscale(grey) 
  }
}

function initial(index: Int64) -> Color { 
  let r = clamp(0, 255, index * 2); 
  let g = clamp(0, 255, 255 - r); 
  let b = clamp(0, 255, r * 3); 
  RGB(r, g, b)
}

export function test() -> Void { 
  let color = drawBounded(
    index * 2, index * 3, initial(index)
  ); 
  let color2 = drawBounded(
    100 - index, index * 3, cycle(color)
  ); 
  let color3 = drawBounded(
    10 + index * 3, 50 - index * 2, cycle(color2)
  ); 
  drawBounded(index * 4, 200 - index * 3, cycle(color3)); 
  if index < 200 then
    set(index, index + 1)
  else
    set(index, 0)
}