
TNotificationMessage {_jsonrpc = "2.0", _method = SMethod_Initialized, _params = InitializedParams}
workspaceFolders []
textDocumentDidOpen
TNotificationMessage {_jsonrpc = "2.0", _method = SMethod_TextDocumentDidOpen, _params = DidOpenTextDocumentParams {_textDocument = TextDocumentItem {_uri = Uri {getUri = "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/typecheck.calc"}, _languageId = LanguageKind_Custom "calc", _version = 0, _text = "type Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}"}}}
TNotificationMessage {_jsonrpc = "2.0", _method = SMethod_Initialized, _params = InitializedParams}
workspaceFolders []
textDocumentDidOpen
TNotificationMessage {_jsonrpc = "2.0", _method = SMethod_TextDocumentDidOpen, _params = DidOpenTextDocumentParams {_textDocument = TextDocumentItem {_uri = Uri {getUri = "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"}, _languageId = LanguageKind_Custom "calc", _version = 0, _text = "\n"}}}
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"type Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"m\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"mo\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"mod\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"modu\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"modul\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module \ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module s\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module st\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module std\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdl\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdli\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib \ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\n\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\nt\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\nty\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntyp\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype M\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Ma\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype May\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Mayb\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a>\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n =\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = S\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = So\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Som\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) |\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | N\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | No\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Not\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothi\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\n\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\nt\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\nty\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype L\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype LIs\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype LIst\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype LIs\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype LI\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype L\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype Li\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a>\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> =\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = C\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Co\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Con\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a,\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, L\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, Li\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, Lis\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a))\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) |\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | N\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Ni\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\n\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\nt\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\nty\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype T\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype Th\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype The\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These(\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These(a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These(a,\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These(a,b\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These(a,\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These(a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These(\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b>\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> =\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = T\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = Th\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = Thi\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) |\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | T\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | Th\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | Tha\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) |\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | \n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | T\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | Th\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | The\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | Thes\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n\ntype Type\n  = TBoolean\n  | TInt\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n\ntype Expr<ann>\n  = EBoolean(ann, Boolean)\n  | EIf(ann, Expr(ann), Expr(ann), Expr(ann))\n  | EInt(ann, Int32)\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n\ntype Unit\n  = Unit\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n\ntype TypeError\n  = ExpectedBooleanGotInt\n  | InternalNonsense\n  | TypeMismatch(Type, Type)\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n\nfunction outerAnnotation<ann>(expr: Expr(ann)) -> ann { \n  case expr {\n    EInt(ann, _) -> ann, \n    EBoolean(ann, _) -> ann, \n    EIf(ann, _, _, _) -> ann \n  }\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n\nfunction isBool(expr: Expr(Type)) -> Boolean { \n  case outerAnnotation(expr) {\n    TBoolean -> True, _ -> False \n  }\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n\nfunction typeEquals(typeA: Type, typeB: Type) -> Boolean { \n  case (typeA, typeB) {\n    (TInt, TInt) -> True, \n    (TBoolean, TBoolean) -> True, \n    _ -> False \n  }\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n\nfunction typecheck(expr: Expr(Unit)) -> Result(\n  TypeError, Expr(Type)\n) { \n  case expr {\n    EInt(_, i) -> Right(EInt(TInt, i)), \n    EBoolean(_, b) -> Right(EBoolean(TBoolean, b)), \n    EIf(_, predExpr, thenExpr, elseExpr) -> {\n      case typecheck(predExpr) {\n        Left(e) -> Left(e), \n        Right(typedPred) -> {\n          if isBool(typedPred) then\n            case (\n              typecheck(thenExpr), typecheck(elseExpr)\n            ) {\n              (Right(typedThen), Right(typedElse)) -> {\n                let tyThen = outerAnnotation(typedThen); \n                let tyElse = outerAnnotation(typedElse); \n                if typeEquals(tyThen, tyElse) then\n                  Right(\n                    EIf(\n                      tyThen, \n                      typedPred, \n                      typedThen, \n                      typedElse\n                    )\n                  )\n                else\n                  Left(TypeMismatch(tyThen, tyElse))\n              }, \n              (_, Left(e)) -> Left(e), \n              (Left(e), _) -> Left(e), \n              _ -> Left(InternalNonsense) \n            }\n          else\n            Left(ExpectedBooleanGotInt)\n        } \n      }\n    } \n  }\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module stdlib {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module  {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module e {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module ei {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module eith {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module eithe {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype \n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype W\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\nw\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Result<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype EResult<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype EiResult<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype EithResult<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype EitheResult<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype EitherResult<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Eitheresult<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Eithersult<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Eitherult<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Eitherlt<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Eithert<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Either<e,a>\n  = Left(e)\n  | Right(a)\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Either<e,a>\n  = Left(e)\n  | Right(a)\n\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\ntype Either<e,a>\n  = Left(e)\n  | Right(a)\n\n\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    f\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    fu\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    func\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    funct\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    functi\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function f\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function fro\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function from\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function fromL\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function fromLe\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function fromLef\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function fromLeft\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function fromLef\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function fromLe\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function fromL\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function fro\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function f\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function i\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function is\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isL\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLe\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLef\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft(\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft(e\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft(ei\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft(eit\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft(eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeftM(eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft(eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<(eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e(eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,(eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a(eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(eithe\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either:\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: E\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Ei\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Eithe\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>)\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) ->\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> B\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Bo\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boo\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Bool\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boole\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    c\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    ca\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    cas\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case ei\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case eith\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case eithe\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n    \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n     \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      R\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Ri\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Rig\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Righ\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_)\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) ->\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> F\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> Fa\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> Fal\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> Fals\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      L\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Le\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Lef\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_)\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) ->\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> T\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> Tr\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> Tru\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      \n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\ntype Maybe<a> \n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\n = Some(a) | Nothing\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\ntype List<a> = Cons(a, List(a)) | Nil\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\ntype These<a,b> = This(a) | That(b) | These(a,b)\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\n\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nu\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\n\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nf\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfu\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunc\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunct\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunctio\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction \n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction (\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction \n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction m\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction ma\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction mai\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main(\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main()\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() \n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() ->\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> \n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> I\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> In\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int3\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 \n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n\n\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n \n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    \n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    i\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    is\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isL\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLe\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLef\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(R\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Ri\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Rig\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Righ\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right(\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((T\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((Tr\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((Tru\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((True\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((True,\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((True,F\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((True,Fa\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((True,Fal\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((True,False\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((True,False)\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((True,False))\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    isLeft(Right((True,False)))\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    iisLeft(Right((True,False)))\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False)))\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) \n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) t\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) th\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then \n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 \n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 e\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 el\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 else\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n    case either {\n      Right(_) -> False,\n      Left(_) -> True\n      }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 else 2\n}\n"
textDocumentDidSave
TNotificationMessage {_jsonrpc = "2.0", _method = SMethod_TextDocumentDidSave, _params = DidSaveTextDocumentParams {_textDocument = TextDocumentIdentifier {_uri = Uri {getUri = "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"}}, _text = Nothing}}
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n          }\n      }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n          }\n     }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n          }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n         }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if isLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if eisLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if eiisLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if eithisLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if eitheisLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if eitherisLeft(Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either.isLeft(Right((True,False))) then 1 else 2\n}\n"
textDocumentDidSave
TNotificationMessage {_jsonrpc = "2.0", _method = SMethod_TextDocumentDidSave, _params = DidSaveTextDocumentParams {_textDocument = TextDocumentIdentifier {_uri = Uri {getUri = "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"}}, _text = Nothing}}
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either.isLeft(eRight((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either.isLeft(eiRight((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either.isLeft(eitRight((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either.isLeft(eithRight((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either.isLeft(eitherRight((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either.isLeft(either.Right((True,False))) then 1 else 2\n}\n"
textDocumentDidSave
TNotificationMessage {_jsonrpc = "2.0", _method = SMethod_TextDocumentDidSave, _params = DidSaveTextDocumentParams {_textDocument = TextDocumentIdentifier {_uri = Uri {getUri = "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"}}, _text = Nothing}}
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if eitherisLeft(either.Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either:isLeft(either.Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either::isLeft(either.Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either:isLeft(either.Right((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either:isLeft(eitherRight((True,False))) then 1 else 2\n}\n"
Processing DidChangeTextDocument for: NormalizedUri (-8026853311670011336) "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"
"module either {\n    type Either<e,a>\n      = Left(e)\n      | Right(a)\n\n    function isLeft<e,a>(either: Either<e,a>) -> Boolean {\n        case either {\n          Right(_) -> False,\n          Left(_) -> True\n        }\n    }\n\n}\n\nfunction main() -> Int32 {\n    if either:isLeft(either:Right((True,False))) then 1 else 2\n}\n"
textDocumentDidSave
TNotificationMessage {_jsonrpc = "2.0", _method = SMethod_TextDocumentDidSave, _params = DidSaveTextDocumentParams {_textDocument = TextDocumentIdentifier {_uri = Uri {getUri = "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"}}, _text = Nothing}}
textDocumentDidSave
TNotificationMessage {_jsonrpc = "2.0", _method = SMethod_TextDocumentDidSave, _params = DidSaveTextDocumentParams {_textDocument = TextDocumentIdentifier {_uri = Uri {getUri = "file:///Users/daniel/Git/wasm-calc/wasm-calc12/test/static/modules.calc"}}, _text = Nothing}}